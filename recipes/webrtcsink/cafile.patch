diff --git a/Cargo.lock b/Cargo.lock
index d2177c0..1e4930e 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -1819,6 +1819,7 @@ name = "webrtcsink"
 version = "0.1.0"
 dependencies = [
  "anyhow",
+ "async-native-tls",
  "async-std",
  "async-tungstenite",
  "clap",
diff --git a/plugins/Cargo.toml b/plugins/Cargo.toml
index 13494d0..6fbc381 100644
--- a/plugins/Cargo.toml
+++ b/plugins/Cargo.toml
@@ -21,6 +21,7 @@ anyhow = "1"
 thiserror = "1"
 futures = "0.3"
 async-std = { version = "1", features = ["unstable"] }
+async-native-tls = { version = "0.3.0" }
 async-tungstenite = { version = "0.16", features = ["async-std-runtime", "async-native-tls"] }
 serde = "1"
 serde_derive = "1"
diff --git a/plugins/src/signaller/imp.rs b/plugins/src/signaller/imp.rs
index 6eafd3c..0bfb815 100644
--- a/plugins/src/signaller/imp.rs
+++ b/plugins/src/signaller/imp.rs
@@ -10,6 +10,7 @@ use gst::subclass::prelude::*;
 use gst::{gst_debug, gst_error, gst_info, gst_trace, gst_warning};
 use once_cell::sync::Lazy;
 use serde_derive::{Deserialize, Serialize};
+use std::path::PathBuf;
 use std::sync::Mutex;
 
 static CAT: Lazy<gst::DebugCategory> = Lazy::new(|| {
@@ -56,14 +57,17 @@ struct JsonMsg {
     inner: JsonMsgInner,
 }
 
+#[derive(Clone)]
 struct Settings {
     address: Option<String>,
+    cafile: Option<PathBuf>,
 }
 
 impl Default for Settings {
     fn default() -> Self {
         Self {
             address: Some("ws://127.0.0.1:8443".to_string()),
+            cafile: None,
         }
     }
 }
@@ -76,16 +80,22 @@ pub struct Signaller {
 
 impl Signaller {
     async fn connect(&self, element: &WebRTCSink) -> Result<(), Error> {
-        let address = self
-            .settings
-            .lock()
-            .unwrap()
-            .address
-            .as_ref()
-            .unwrap()
-            .clone();
+        let settings = self.settings.lock().unwrap().clone();
+
+        let connector = if let Some(path) = settings.cafile {
+            let cert = async_std::fs::read_to_string(&path).await?;
+            let cert = async_native_tls::Certificate::from_pem(cert.as_bytes())?;
+            let connector = async_native_tls::TlsConnector::new();
+            Some(connector.add_root_certificate(cert))
+        } else {
+            None
+        };
 
-        let (ws, _) = async_tungstenite::async_std::connect_async(address).await?;
+        let (ws, _) = async_tungstenite::async_std::connect_async_with_tls_connector(
+            settings.address.unwrap(),
+            connector,
+        )
+        .await?;
 
         gst_info!(CAT, obj: element, "connected");
 
@@ -346,13 +356,22 @@ impl ObjectSubclass for Signaller {
 impl ObjectImpl for Signaller {
     fn properties() -> &'static [glib::ParamSpec] {
         static PROPERTIES: Lazy<Vec<glib::ParamSpec>> = Lazy::new(|| {
-            vec![glib::ParamSpecString::new(
-                "address",
-                "Address",
-                "Address of the signalling server",
-                Some("ws://127.0.0.1:8443"),
-                glib::ParamFlags::READWRITE,
-            )]
+            vec![
+                glib::ParamSpecString::new(
+                    "address",
+                    "Address",
+                    "Address of the signalling server",
+                    Some("ws://127.0.0.1:8443"),
+                    glib::ParamFlags::READWRITE,
+                ),
+                glib::ParamSpecString::new(
+                    "cafile",
+                    "cafile",
+                    "cafile",
+                    None,
+                    glib::ParamFlags::READWRITE,
+                ),
+            ]
         });
 
         PROPERTIES.as_ref()
@@ -378,15 +397,22 @@ impl ObjectImpl for Signaller {
                     gst_error!(CAT, "address can't be None");
                 }
             }
+            "cafile" => {
+                let value: String = value.get().unwrap();
+                let mut settings = self.settings.lock().unwrap();
+                settings.cafile = Some(value.into());
+            }
             _ => unimplemented!(),
         }
     }
 
     fn property(&self, _obj: &Self::Type, _id: usize, pspec: &glib::ParamSpec) -> glib::Value {
         match pspec.name() {
-            "address" => {
+            "address" => self.settings.lock().unwrap().address.to_value(),
+            "cafile" => {
                 let settings = self.settings.lock().unwrap();
-                settings.address.to_value()
+                let cafile = settings.cafile.as_ref();
+                cafile.and_then(|file| file.to_str()).to_value()
             }
             _ => unimplemented!(),
         }
