name: Runner
on:
  repository_dispatch: ~
jobs:
  build:
    name: ${{ github.event.event_type }}
    runs-on: ${{ github.event.client_payload.tags }}
    container:
      image: ${{ github.event.client_payload.image }}
    steps:
      - 
        uses: aivero/checkout@main
        with:
          ref: ${{ github.event.client_payload.commit }}
          submodules: true
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - 
        name: Runner
        uses: aivero/runner-action@master
        with:
          cmdsPre: ${{ github.event.client_payload.cmds.pre }}
          cmds: ${{ github.event.client_payload.cmds.main }}
          cmdsPost: ${{ github.event.client_payload.cmds.post }}
        env:
          GIT_REF: ${{ github.event.client_payload.version }}
          CONAN_LOGIN_USERNAME: ${{ secrets.CONAN_LOGIN_USERNAME }}
          CONAN_LOGIN_PASSWORD: ${{ secrets.CONAN_LOGIN_PASSWORD }}
          CONAN_CONFIG_URL: ${{ secrets.CONAN_CONFIG_URL }}
          CONAN_CONFIG_DIR: ${{ secrets.CONAN_CONFIG_DIR }}
          CONAN_REPO_ALL: ${{ secrets.CONAN_REPO_ALL }}
          CONAN_REPO_INTERNAL: ${{ secrets.CONAN_REPO_INTERNAL }}
          CONAN_REPO_PUBLIC: ${{ secrets.CONAN_REPO_PUBLIC }}
      - 
        name: Report status
        uses: aivero/status-action@master
        if: ${{ always() }}
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          context: ${{ github.event.client_payload.context }}
          commit: ${{ github.event.client_payload.commit }}
          status: ${{ job.status }}
      - 
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: build-logs
          path: |
            ${{ env.CONAN_PKG_PATH }}/build/**/meson-logs/*-log.txt
            ${{ env.CONAN_PKG_PATH }}/build/**/config.log
            ${{ env.CONAN_PKG_PATH }}/build/**/CMakeError.log
            ${{ env.CONAN_PKG_PATH }}/build/**/CMakeOutput.log
            ${{ env.CONAN_PKG_PATH }}/build/**/cmake_bootstrap.log
       - 
        name: Store conan deployed ${{ github.event.client_payload.component }}
        uses: actions/upload-artifact@v2
        if: ${{ success() && contains(github.event.client_payload.cmds.main, 'conan install') }}
        with:
          name: conan-install-${{ github.event.client_payload.component }}
          path: |
            ${{ github.event.client_payload.component }}/install/*.tar.bz2
  
  docker_build:
    name: "Docker build: ${{ github.event.client_payload.component }}"
    needs: build
    if: ${{ github.event.client_payload.docker && success() }}
    runs-on: ubuntu-latest
    steps:
      - 
        uses: aivero/checkout@main
        with:
          ref: ${{ github.event.client_payload.commit }}
          submodules: true
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - 
        name: Download conan deployed ${{ github.event.client_payload.component }}
        if: contains(github.event.client_payload.cmds.main, 'install-')
        uses: actions/download-artifact@v2
        with:
          name: conan-install-${{ github.event.client_payload.component }}
      - 
        name: "Untar files"
        if: contains(github.event.client_payload.cmds.main, 'install-')
        run: tar -xvf install-${{ github.event.client_payload.component }}.tar.bz2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1      
      - 
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PUSH_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ${{ github.event.client_payload.component }}
          file: ${{ github.event.client_payload.docker.dockerfile }}
          build-args: |
            VERSION=${{ github.event.client_payload.version }} 
          push: true
          platforms: ${{ github.event.client_payload.docker.platform }}
          tags: ${{ github.event.client_payload.docker.tag }}
  
  balena-deploy:
    needs: docker_build
    if: ${{ contains(github.event.client_payload.component, 'deepcore-daemon') && ( contains(github.event.client_payload.profile, '186') || contains(github.event.client_payload.profile, '210') ) }}
    runs-on: ubuntu-latest
    env:
      BALENA_DOCKER_DIR: ${{ github.event.client_payload.component }}/docker
    steps:
      - 
        id: lowercase-profile
        uses: ASzc/change-string-case-action@v2
        with:
          string: ${{ github.event.client_payload.profile }}
      - 
        name: Checkout
        uses: actions/checkout@v2
      - 
        name: "set version"
        run: sed -i "s#\${DEEPCORE_DAEMON_VERSION}#${{ github.event.client_payload.version }}#" ${{ env.BALENA_DOCKER_DIR }}/docker-compose.yml
      - 
        name: "set hardware"
        run: sed -i "s#\${CONAN_PROFILE}#${{ steps.lowercase-profile.outputs.lowercase }}#" ${{ env.BALENA_DOCKER_DIR }}/docker-compose.yml
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_PUSH_TOKEN }}
      - 
        name: "Pull containers"
        run: docker-compose -f ${{ env.BALENA_DOCKER_DIR }}/docker-compose.yml pull
      - 
        name: Balena Deploy
        uses: aivero/balena-cli-action@master
        if: success()
        timeout-minutes: 5
        env:
          APPLICATION: staging-${{ steps.lowercase-profile.outputs.lowercase }}
        with:
          balena_api_token: ${{ secrets.BALENA_TOKEN }}
          balena_command: "balena deploy ${{ env.APPLICATION }} --emulated -s ${{ env.BALENA_DOCKER_DIR }}"
          balena_secrets: |
            {
              "ghcr.io": {
                "username": "${{ github.actor }}",
                "password": "${{ secrets.GHCR_PUSH_TOKEN }}"
              }
            }
      - 
        name: Balena Deploy
        uses: aivero/balena-cli-action@master
        if: success()
        timeout-minutes: 5
        env:
          APPLICATION: staging-${{ steps.lowercase-profile.outputs.lowercase }}
        with:
          balena_api_token: ${{ secrets.BALENA_TOKEN }}
          balena_command: balena app ${{ env.APPLICATION }} | grep COMMIT | awk '{print $2}' | xargs balena tag set version ${{ github.event.client_payload.version }}  --release
      - 
        name: Balena Deploy
        uses: aivero/balena-cli-action@master
        if: success()
        timeout-minutes: 5
        env:
          APPLICATION: staging-${{ steps.lowercase-profile.outputs.lowercase }}
        with:
          balena_api_token: ${{ secrets.BALENA_TOKEN }}
          balena_command: balena app ${{ env.APPLICATION }} | grep COMMIT | awk '{print $2}' | xargs balena tag set commit_sha ${{ github.event.client_payload.commit }}  --release
